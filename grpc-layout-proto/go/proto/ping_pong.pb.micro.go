// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: grpc_layout_proto/ping_pong.proto

package hello

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go.unistack.org/micro/v3/api"
	client "go.unistack.org/micro/v3/client"
	server "go.unistack.org/micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PingPongService service

func NewPingPongServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PingPongService service

type PingPongService interface {
	Call(ctx context.Context, in *RequestMsg, opts ...client.CallOption) (*ResponseMsg, error)
}

type pingPongService struct {
	c    client.Client
	name string
}

func NewPingPongService(name string, c client.Client) PingPongService {
	return &pingPongService{
		c:    c,
		name: name,
	}
}

func (c *pingPongService) Call(ctx context.Context, in *RequestMsg, opts ...client.CallOption) (*ResponseMsg, error) {
	req := c.c.NewRequest(c.name, "PingPongService.Call", in)
	out := new(ResponseMsg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PingPongService service

type PingPongServiceHandler interface {
	Call(context.Context, *RequestMsg, *ResponseMsg) error
}

func RegisterPingPongServiceHandler(s server.Server, hdlr PingPongServiceHandler, opts ...server.HandlerOption) error {
	type pingPongService interface {
		Call(ctx context.Context, in *RequestMsg, out *ResponseMsg) error
	}
	type PingPongService struct {
		pingPongService
	}
	h := &pingPongServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PingPongService{h}, opts...))
}

type pingPongServiceHandler struct {
	PingPongServiceHandler
}

func (h *pingPongServiceHandler) Call(ctx context.Context, in *RequestMsg, out *ResponseMsg) error {
	return h.PingPongServiceHandler.Call(ctx, in, out)
}
